apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{- include "nami.labels" . | nindent 4 }}
    hasuraService: custom
  name: {{ include "nami.fullname" . }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "nami.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      creationTimestamp: null
      labels:
        {{- include "nami.selectorLabels" . | nindent 8 }}
      annotations:
        vault.hashicorp.com/agent-init-first: "true"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "internal-app"
        vault.hashicorp.com/agent-inject-secret-database-config: "internal/data/database/config"
        vault.hashicorp.com/agent-inject-template-database-config: |
          {{`{{- with secret "internal/data/database/config" -}}
            export HASURA_GRAPHQL_DATABASE_URL=postgres://{{ .Data.data.username }}:{{ .Data.data.password }}@35.196.127.103:5432/nami
          {{- end }}`}}
        vault.hashicorp.com/agent-inject-secret-hasura-config: "internal/data/hasura"
        vault.hashicorp.com/agent-inject-template-hasura-config: |
          {{`{{- with secret "internal/data/hasura" -}}
            export HASURA_GRAPHQL_ADMIN_SECRET={{ .Data.data.admin_secret }}
          {{- end }}`}}
    spec:
      serviceAccountName: nami
      containers:
      - image: hasura/graphql-engine:v1.3.3
        imagePullPolicy: IfNotPresent
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
        name: {{ .Chart.Name }}
        args:
            ['sh', '-c', 'source /vault/secrets/database-config && source /vault/secrets/hasura-config && graphql-engine serve']
        env:
        - name: HASURA_GRAPHQL_ENABLE_CONSOLE
          value: "true"
        - name: HASURA_GRAPHQL_DEV_MODE
          value: "true"
        - name: HASURA_GRAPHQL_ENABLED_APIS
          value: "graphql,metadata,config"
        - name: HASURA_GRAPHQL_CONSOLE_ASSETS_DIR
          value: "/srv/console-assets"
        - name: HASURA_GRAPHQL_JWT_SECRET
          value: '{"type": "RS512", "key": "-----BEGIN CERTIFICATE-----\nMIIDCTCCAfGgAwIBAgIJGrsmVe/+3d1wMA0GCSqGSIb3DQEBCwUAMCIxIDAeBgNV\nBAMTF2Rtb2lzZWVua28udXMuYXV0aDAuY29tMB4XDTIxMDExMTExMjkxNVoXDTM0\nMDkyMDExMjkxNVowIjEgMB4GA1UEAxMXZG1vaXNlZW5rby51cy5hdXRoMC5jb20w\nggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC/LFlBHgpsHvjv/hFIPMEp\nGnrrJNaR11bLAVFundjffPf+Gs47ZT17f25mETWhjJ+AhTygRP6Gv3zQBDdGNVSs\nwhN+4pGPzpBd7X9W4ogHR3qleQGMnqZl6NcC4iksZTVzCM11mqCibjIz+W3EfPI6\nNR/noZFdlof8DjlLJx/hlz8G7JFcA/TZlusioNxWDnuwvw/s42YQk61Q5hM4UgOD\nNe7TH/76G5bymiY4YALOWMWRWhG++6HEdrcH1GmMp/gZ4wUkCR4NXHYIlP71kmrp\n34dXs2fZvdmin9BPWZSgaTC1NYfaFTfGvmZ8476taYvgu9ofT0/pd+vfPx7dpij9\nAgMBAAGjQjBAMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFDMokJ1lW6PbZ9Y1\n2guvN/Q/bJ0lMA4GA1UdDwEB/wQEAwIChDANBgkqhkiG9w0BAQsFAAOCAQEAaujT\nAO2YFAKS/mrm37sXfnnJM+wYCgnS63j9UouGEofoLtXQ1jN7OuyUCt6ARfVdYyfe\nfOckDb5MPPz2MHrYPe3+GrA/gXvzFrEAMcMVb2YBofg6vAIoVeuhROXylsmdXDIm\nNdy2AHDV7W/EkR2MmdfpAWlJq9/F0vNrDUeSVpZvt0RB4vkvNvVP3HzIOBD7RzSy\nwg+NQQhlF7bLI6nrDWibKa5DWwx+Pf2guEmHws2gIz9gfIw7n97pmc+mdeBGyu9l\nx81aK0D20ZF6n9qyBhhfXZSaIzZxaaVAorlyZPOyw1trq7PXMqyyccQgFid2fig3\nMN0yVLr+/V4mTZb4vA==\n-----END CERTIFICATE-----"}'
        ports:
        - containerPort: 8080
          protocol: TCP
        resources: {}
